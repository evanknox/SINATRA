#lasso = cv.gglasso(x = data2$data[,-1], y = data2$data[,1], group = rep(1:(dim(data2$data)[2]/3),3), loss = "logit")
lasso = cv.glmnet(x = data2$data[,-1], y = data2$data[,1], alpha = 0.5,  loss = "logit")
coefs  = coef(lasso, s = 'lambda.min')
which(coefs>0)
#lasso = cv.gglasso(x = data2$data[,-1], y = data2$data[,1], group = rep(1:(dim(data2$data)[2]/3),3), loss = "logit")
lasso = cv.glmnet(x = data2$data[,-1], y = data2$data[,1], alpha = 0.5,  family = "binomial")
coefs  = coef(lasso, s = 'lambda.min')
which(coefs>0)
groups = rep(1:(dim(data2$data)[2]/3),3)
groups
nonzero = which(coefs>0)
nonzero
groups[nonzero]
groups
groups
groups = rep(1:(dim(data2$data)[2]/3),3)
groups
groups = rep(1:(dim(data2$data)[2]/3),each = 3)
#lasso = cv.gglasso(x = data2$data[,-1], y = data2$data[,1], group = rep(1:(dim(data2$data)[2]/3),3), loss = "logit")
lasso = cv.glmnet(x = data2$data[,-1], y = data2$data[,1], alpha = 0.5,  family = "binomial")
coefs  = coef(lasso, s = 'lambda.min')
nonzero = which(coefs>0)
groups
groups[nonzero]
groups = rep(1:(dim(data2$data)[2]/3),each = 3)
lasso = cv.gglasso(x = data2$data[,-1], y = data2$data[,1], group = groups, loss = "logit")
#lasso = cv.glmnet(x = data2$data[,-1], y = data2$data[,1], alpha = 0.5,  family = "binomial")
coefs  = coef(lasso, s = 'lambda.min')
nonzero = which(coefs>0)
groups[nonzero]
nonzero
groups = rep(1:(dim(data2$data)[2]/3),each = 3)
#lasso = cv.gglasso(x = data2$data[,-1], y = data2$data[,1], group = groups, loss = "logit")
lasso = cv.glmnet(x = data2$data[,-1], y = data2$data[,1], alpha = 0.5,  family = "binomial")
coefs  = coef(lasso, s = 'lambda.min')
nonzero = which(coefs>0)
groups[nonzero]
unique(groups)
groups[nonzero]
unique(groups[nonzero])
results = unique(groups[nonzero])
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
lasso = cv.glmnet(x = data2$data[,-1], y = data2$data[,1], alpha = 0.0,  family = "binomial")
coefs  = coef(lasso, s = 'lambda.min')
nonzero = which(coefs>0)
results = unique(groups[nonzero])
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
nonzero = which(coefs>0.5)
results = unique(groups[nonzero])
nonzero = which(coefs>0.5)
results = unique(groups[nonzero])
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
which(coefs < 0)
nonzero = which(abs(coefs)>0.5)
results = unique(groups[nonzero])
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
lasso = cv.glmnet(x = data2$data[,-1], y = data2$data[,1], alpha = 0.0,  family = "binomial")
coefs  = coef(lasso, s = 'lambda.min')
nonzero = which(abs(coefs)>0.8)
results = unique(groups[nonzero])
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
merge(groups, coefs)
g = merge(matrix(groups), matrix(coefs))
g
g
matrix(groups)
matrix(coefs)
g = cbind(groups, coefs)
length(groups)
length(results)
length(coefs)
length(coefs)
coefs[0]
coefs
g = cbind(groups, coefs[-1])
g
coefs[1:10]
dim(data2$data[,-1])
#Binary Option
nonzero = which(abs(coefs[-1])>0.8)
results = unique(groups[nonzero])
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$causal_points1] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
#### Sanity Checks ####
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$causal_points2] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
#### Sanity Checks ####
color1='blue'
color2='lightgreen'
color3='red'
col_pal=c(color1,color1,color2,color2,color2,color3)
col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
colfunc <- colorRampPalette(col_pal)
new_heat_colors=colfunc(max(new_heat[,1]) - min(new_heat[,1]))[new_heat[,1] - min(new_heat[,1])]
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(abs_coefs[,1]) - min(abs_coefs[,1]))[abs_coefs[,1] - min(abs_coefs[,1])]
abs_coefs = abs(coefs)
color1='blue'
color2='lightgreen'
color3='red'
col_pal=c(color1,color1,color2,color2,color2,color3)
col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(abs_coefs[,1]) - min(abs_coefs[,1]))[abs_coefs[,1] - min(abs_coefs[,1])]
g = cbind(groups, coefs[-1])
g
which.max(g)
which.max(g[,1])
data.table(g)
library(data.table)
df = as.data.table(g)
df[,list(Name = Name[which.max(Value)]),by = GroupID]
df
df[,list(Name = Name[which.max(V2)]),by = groups]
df[,list(V2 = V2[which.max(V2)]),by = groups]
max(groups)
df[,list(V2 = V2[which.max(V2)]),by = groups]
df
abs_coefs = df[,list(V2 = V2[which.max(V2)]),by = groups][,2]
abs_coefs
abs_coefs = abs(df[,list(V2 = V2[which.max(V2)]),by = groups][,2])
color1='blue'
color2='lightgreen'
color3='red'
col_pal=c(color1,color1,color2,color2,color2,color3)
col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(abs_coefs[,1]) - min(abs_coefs[,1]))[abs_coefs[,1] - min(abs_coefs[,1])]
abs_coefs
abs_coefs = as.vector(abs(df[,list(V2 = V2[which.max(V2)]),by = groups][,2]))
color1='blue'
color2='lightgreen'
color3='red'
col_pal=c(color1,color1,color2,color2,color2,color3)
col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(abs_coefs[,1]) - min(abs_coefs[,1]))[abs_coefs[,1] - min(abs_coefs[,1])]
abs_coefs
abs_coefs[,1]
abs_coefs$V2
abs_coefs = abs(df[,list(V2 = V2[which.max(V2)]),by = groups][,2])$V2
color1='blue'
color2='lightgreen'
color3='red'
col_pal=c(color1,color1,color2,color2,color2,color3)
col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(abs_coefs[,1]) - min(abs_coefs[,1]))[abs_coefs[,1] - min(abs_coefs[,1])]
heat_colors=colfunc(max(abs_coefs) - min(abs_coefs))[abs_coefs - min(abs_coefs)]
heat_colors
heat_colors=colfunc(max(abs_coefs) - min(abs_coefs))[abs_coefs - min(abs_coefs)]
plot3d(mesh, col = heat_colors)
heat_colors=colfunc(length(unique(abs_coefs)))[abs_coefs - min(abs_coefs)]
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$causal_points2] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
plot3d(mesh, col = heat_colors)
#### Sanity Checks ####
abs_coefs
cuts = quantile(abs_coefs,100)
cuts = quantile(abs_coefs,probs = seq(1,0,100))
cuts = quantile(abs_coefs,probs = seq(1,0,length.out = 100))
cuuts
cuts
cuts = quantile(abs_coefs,probs = seq(1,0,length.out = 200))
xura
cuts
.bincode(abs_coefs,10)
cut(abs_coefs,10)
cut(abs_coefs,10, labels = FALSE)
cuts = cut(abs_coefs,100,labels = FALSE)
color1='blue'
color2='lightgreen'
color3='red'
col_pal=c(color1,color1,color2,color2,color2,color3)
col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(cuts) - min(cuts))[cuts - min(cuts)]
plot3d(mesh, col = heat_colors)
col_pal=c(color1,color1,color2,color2,color2,color3)
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(cuts) - min(cuts))[cuts - min(cuts)]
plot3d(mesh, col = heat_colors)
col_pal=c(color1,color2,color3)
#col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
col_pal=c(color1,color1,color2,color2,color2,color3)
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(cuts) - min(cuts))[cuts - min(cuts)]
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$causal_points2] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
plot3d(mesh, col = heat_colors)
#### Sanity Checks ####
hist(cuuts)
hist(cuts)
cuts = cut(log(abs_coefs),100,labels = FALSE)
color1='blue'
color2='lightgreen'
color3='red'
col_pal=c(color1,color2,color3)
#col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
col_pal=c(color1,color1,color2,color2,color2,color3)
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(cuts) - min(cuts))[cuts - min(cuts)]
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$causal_points2] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
plot3d(mesh, col = heat_colors)
log(cuts)
log(abs_coefs)
library(glmnet)
data2 = generate_data_sphere_simulation_new(nsim = nsim,dir = dirs, curve_length = len,noise_points = shared_points,
causal_points = causal_points,ball_radius = ball_radius, subdivision = subdivision,
cusps = cusps, causal_regions_1 = causal_regions_1, causal_regions_2 = causal_regions_2,
shared_regions = shared_regions, ec_type = ec_type)
groups = rep(1:(dim(data2$data)[2]/3),each = 3)
#lasso = cv.gglasso(x = data2$data[,-1], y = data2$data[,1], group = groups, loss = "logit")
lasso = cv.glmnet(x = data2$data[,-1], y = data2$data[,1], alpha = 0.0,  family = "binomial")
coefs  = coef(lasso, s = 'lambda.min')
#Binary Option
nonzero = which(abs(coefs[-1])>0.8)
results = unique(groups[nonzero])
# Heatmap Option
g = cbind(groups, coefs[-1])
library(data.table)
df = as.data.table(g)
abs_coefs = abs(df[,list(V2 = V2[which.max(V2)]),by = groups][,2])$V2
cuts = cut(abs_coefs,100,labels = FALSE)
color1='blue'
color2='lightgreen'
color3='red'
col_pal=c(color1,color2,color3)
#col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
col_pal=c(color1,color1,color2,color2,color2,color3)
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(cuts) - min(cuts))[cuts - min(cuts)]
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$causal_points2] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
plot3d(mesh, col = heat_colors)
col_pal=c(color1,color2,color3)
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(cuts) - min(cuts))[cuts - min(cuts)]
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$causal_points2] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
plot3d(mesh, col = heat_colors)
#### Sanity Checks ####
cuts
cuts = cut(abs_coefs,50,labels = FALSE)
color1='blue'
color2='lightgreen'
color3='red'
#col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
col_pal=c(color1,color1,color2,color2,color2,color3)
col_pal=c(color1,color2,color3)
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(cuts) - min(cuts))[cuts - min(cuts)]
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$causal_points2] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
plot3d(mesh, col = heat_colors)
#### Sanity Checks ####
abs_coefs = abs(df[,list(V2 = V2[which.max(abs(V2))]),by = groups][,2])$V2
cuts = cut(abs_coefs,50,labels = FALSE)
color1='blue'
color2='lightgreen'
color3='red'
#col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
col_pal=c(color1,color1,color2,color2,color2,color3)
col_pal=c(color1,color2,color3)
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(cuts) - min(cuts))[cuts - min(cuts)]
plot3d(mesh, col = heat_colors)
g = cbind(groups, abs(coefs[-1]))
library(data.table)
df = as.data.table(g)
library(data.table)
df = as.data.table(g)
abs_coefs = abs(df[,list(V2 = V2[which.max(V2)]),by = groups][,2])$V2
cuts = cut(abs_coefs,50,labels = FALSE)
color1='blue'
color2='lightgreen'
color3='red'
#col_pal = c("#00007F", "blue", "#007FFF", "cyan",  "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")
col_pal=c(color1,color1,color2,color2,color2,color3)
col_pal=c(color1,color2,color3)
colfunc <- colorRampPalette(col_pal)
heat_colors=colfunc(max(cuts) - min(cuts))[cuts - min(cuts)]
mesh = vcgSphere(subdivision = 3)
mesh$vb[1:3,] = t(data2$complex_points[[1]])
cols = rep('white', dim(mesh$vb)[2])
cols[data$causal_points1] = 'red'
cols[data$causal_points2] = 'red'
cols[data$noise] = 'blue'
cols[results] = 'green'
plot3d(mesh, col = cols)
plot3d(mesh, col = heat_colors)
rm(list=ls())
set.seed(4913, kind = "L'Ecuyer-CMRG")
library(sinatra)
library(FNN)
library(rgl)
library(Rvcg)
library(plyr)
library(pdist)
library(gglasso)
library(numbers)
library(data.table)
library(stringr)
library(ggplot2)
cap_radius = 0.15
num_cones = 5
directions_per_cone = 5
len = 75
num_vertices = 5131
#### Function ####
summarize_list = function(roc_curve_list){
num_curves = length(roc_curve_list)
curve = roc_curve_list[[1]]
for (i in 2:num_curves){
curve = curve+roc_curve_list[[i]]
}
curve = curve/num_curves
return(curve)
}
load('~/Documents/real_data_comparisons/2020-0626.RData')
load('~/Documents/real_data_comparisons/2020-0626-area.RData')
load('~/Documents/real_data_comparisons/2020-0626.RData')
knn_mean_mean
knn_mean_median
e
exp(1)
pval_correct(x){
if (x > 0.1){
return(0)
}
else{
new_val = exp(1) * x * log(x)
return(1/new_val)
}
}
pval_correct = function(x){
if (x > 0.1){
return(0)
}
else{
new_val = exp(1) * x * log(x)
return(1/new_val)
}
}
knn_mean_median_corrected = pval_correct(knn_mean_median)
knn_mean_median_corrected = apply(knn_mean_median,pval_correct)
knn_mean_median_corrected = apply(knn_mean_median,FUN = pval_correct)
knn_mean_median_corrected = sapply(knn_mean_median,FUN = pval_correct)
?sapply
knn_mean_median_corrected = sapply(X = knn_mean_median,FUN = pval_correct)
aknn_mean_median_corrected
knn_mean_median_corrected
knn_mean_median
knn_mean_median_corrected = apply(X = knn_mean_median,MARGIN = c(1,2),FUN = pval_correct)
knn_mean_median_corrected
knn_mean_median_corrected[,1] = knn_mean_median[,1]
knn_mean_median_corrected
new_val = -exp(1) * x * log(x)
pval_correct = function(x){
if (x > 0.1){
return(0)
}
else{
new_val = -exp(1) * x * log(x)
return(1/new_val)
}
}
knn_mean_median_corrected = apply(X = knn_mean_median,MARGIN = c(1,2),FUN = pval_correct)
knn_mean_median_corrected[,1] = knn_mean_median[,1]
knn_mean_median_corrected
save.image('~/Documents/real_data_comparisons/2020-0626.RData')
load('~/Documents/real_data_comparisons/2020-0626.RData')
load('~/Documents/real_data_comparisons/2020-0626-area.RData')
area_mean_median_corrected = apply(X = area_mean_median,MARGIN = c(1,2),FUN = pval_correct)
area_mean_median_corrected[,1] = area_mean_median[,1]
area_mean_median_corrected
area_mean_median
area_mean_median_corrected
knn_mean_median_corrected
area_mean_median
knn_mean_median
load('~/Documents/real_data_comparisons/2020-0626-area.RData')
area_mean_median
knn_pvals_mean
tarsius_microcebus_frame = data.frame(area_pvals_mean$tarsius_microcebus_pval_matrix)
tarsius_mirza_frame = data.frame(area_pvals_mean$tarsius_mirza_pval_matrix)
tarsius_saimiri_frame = data.frame(area_pvals_mean$tarsius_saimiri_pval_matrix)
area_mean_mean = aggregate(tarsius_microcebus_frame$X1, by=list(tarsius_microcebus_frame$X2), FUN=mean)
area_mean_mean[,1] = region_sizes
colnames(area_mean_mean) = c('Region Size', 'Tarsius-Microcebus')
area_mean_mean['Tarsius-Mirza'] = aggregate(tarsius_mirza_frame$X1, by=list(tarsius_mirza_frame$X2), FUN=mean)[2]
area_mean_mean['Tarsius-Saimiri'] = aggregate(tarsius_saimiri_frame$X1, by=list(tarsius_saimiri_frame$X2), FUN=mean)[2]
area_mean_mean
area_mean_median = aggregate(tarsius_microcebus_frame$X1, by=list(tarsius_microcebus_frame$X2), FUN=median)
area_mean_median[,1] = region_sizes
colnames(area_mean_median) = c('Region Size', 'Tarsius-Microcebus')
area_mean_median['Tarsius-Mirza'] = aggregate(tarsius_mirza_frame$X1, by=list(tarsius_mirza_frame$X2), FUN=median)[2]
area_mean_median['Tarsius-Saimiri'] = aggregate(tarsius_saimiri_frame$X1, by=list(tarsius_saimiri_frame$X2), FUN=median)[2]
area_mean_median
tarsius_microcebus_frame = data.frame(area_pvals_max$tarsius_microcebus_pval_matrix)
tarsius_mirza_frame = data.frame(area_pvals_max$tarsius_mirza_pval_matrix)
tarsius_saimiri_frame = data.frame(area_pvals_max$tarsius_saimiri_pval_matrix)
write.csv(tarsius_microcebus_frame,file = '~/Dropbox (Princeton)/Sub-Image Analysis/Manuscript/Old Drafts/Draft 2/Figures/real_data_results/raw_pval_data/area_method/tarius_microcebus_limit_shapes_max.csv',col.names = FALSE,row.names = FALSE)
write.csv(tarsius_mirza_frame,file = '~/Dropbox (Princeton)/Sub-Image Analysis/Manuscript/Old Drafts/Draft 2/Figures/real_data_results/raw_pval_data/area_method/tarius_mirza_limit_shapes_max.csv',col.names = FALSE,row.names = FALSE)
write.csv(tarsius_saimiri_frame,file = '~/Dropbox (Princeton)/Sub-Image Analysis/Manuscript/Old Drafts/Draft 2/Figures/real_data_results/raw_pval_data/area_method/tarius_saimiri_limit_shapes_max.csv',col.names = FALSE,row.names = FALSE)
area_max_mean = aggregate(tarsius_microcebus_frame$X1, by=list(tarsius_microcebus_frame$X2), FUN=mean)
area_max_mean[,1] = region_sizes
colnames(area_max_mean) = c('Region Size', 'Tarsius-Microcebus')
area_max_mean['Tarsius-Mirza'] = aggregate(tarsius_mirza_frame$X1, by=list(tarsius_mirza_frame$X2), FUN=mean)[2]
area_max_mean['Tarsius-Saimiri'] = aggregate(tarsius_saimiri_frame$X1, by=list(tarsius_saimiri_frame$X2), FUN=mean)[2]
area_max_mean
area_max_median = aggregate(tarsius_microcebus_frame$X1, by=list(tarsius_microcebus_frame$X2), FUN=median)
area_max_median[,1] = region_sizes
colnames(area_max_median) = c('Region Size', 'Tarsius-Microcebus')
area_max_median['Tarsius-Mirza'] = aggregate(tarsius_mirza_frame$X1, by=list(tarsius_mirza_frame$X2), FUN=median)[2]
area_max_median['Tarsius-Saimiri'] = aggregate(tarsius_saimiri_frame$X1, by=list(tarsius_saimiri_frame$X2), FUN=median)[2]
area_max_median
area_mean_median_corrected = apply(X = area_mean_median,MARGIN = c(1,2),FUN = pval_correct)
area_mean_median_corrected[,1] = area_mean_median[,1]
area_mean_median_corrected
#### Write ####
save.image('~/Documents/real_data_comparisons/2020-0626-area.RData')
load('~/Documents/real_data_comparisons/2020-0626-area.RData')
write.csv(area_mean_median,'~/Dropbox (Princeton)/Sub-Image Analysis/Manuscript/Old Drafts/Draft 2/Figures/real_data_results/limit_shapes_area_mean_median_pvals.csv')
area_mean_median
knn_mean_median
