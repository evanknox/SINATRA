num_causal_region = causal_regions,
num_shared_region = shared_regions)
data <- data.frame(averaged_roc_curve)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/3causal_6shared_2000landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/3causal_6shared_2000landmarks_sphere_simulated_roc.pdf')
# vary the number of cusps...
# how do you make the TPR / FPR fair?
causal_regions = 1
shared_regions = 2
averaged_roc_curve <- generate_averaged_ROC_baseline(runs = 10,
num_shape_scaffold = 100,
num_landmarks = 500,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
data <- data.frame(averaged_roc_curve)
#write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/3causal_6shared_2000landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/1causal_2shared_500landmarks_sphere_simulated_roc.pdf')
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/1causal2shared_500landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
# vary the number of cusps...
# how do you make the TPR / FPR fair?
causal_regions = 3
shared_regions = 6
averaged_roc_curve <- generate_averaged_ROC_baseline(runs = 10,
num_shape_scaffold = 100,
num_landmarks = 500,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
data <- data.frame(averaged_roc_curve)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/3causal6shared_500landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/3causal_6shared_500landmarks_sphere_simulated_roc.pdf')
causal_regions = 5
shared_regions = 10
averaged_roc_curve <- generate_averaged_ROC_baseline(runs = 10,
num_shape_scaffold = 100,
num_landmarks = 500,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
data <- data.frame(averaged_roc_curve)
### Save the data
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/5causal_10shared_500landmarks_sphere_simulated_roc.pdf')
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/5causal10shared_500landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
lasso = cv.glmnet(x = data[,-1], y = data[,1], alpha = 1.0,  family = "binomial") # how do these work?
data = shape_data[[1]]
class1_positive_landmarks = shape_data[[2]]
class2_positive_landmarks = shape_data[[3]]
#### Apply Group Lasso using the grplasso package to the data, defining groups as the coordinates of the landmark points.
# Do both group lasso and elastic net with group parameters.
groups <- rep(1:(dim(data)[2]/3),each = 3)
lasso = cv.glmnet(x = data[,-1], y = data[,1], alpha = 1.0,  family = "binomial") # how do these work?
coefs <- coef(lasso, s = 'lambda.min')
# pick a cross validation parameter.
#coefs <- coef(lasso, s = c(0,0.0001,0.001,0.01,0.10,0.5,1.0,10))
coefs
#Binary Option
# normalize the coefficients. Before sweeping.
nonzero = which(abs(coefs)>0) # why is this 0.8?
results = unique(groups[nonzero])
results
causal_regions_1
causal_regions_2
#### Can compare these ROC curves directly to the sinatra simulation ...
causal_regions = 5
shared_regions = 10
generate_ROC_baseline(num_shape_scaffold = 50,
num_landmarks = 500,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
# vary the number of cusps...
# how do you make the TPR / FPR fair?
causal_regions = 1
shared_regions = 2
averaged_roc_curve <- generate_averaged_ROC_baseline(runs = 10,
num_shape_scaffold = 100,
num_landmarks = 500,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
lasso = cv.glmnet(x = data[,-1], y = data[,1], alpha = 1.0,  family = "binomial",
intercept = TRUE, loss = "logit", nlambda = 500, pred.loss = "loss",nfolds = 10) # how do these work?
coefs <- coef(lasso, s = 'lambda.min')
# pick a cross validation parameter.
#coefs <- coef(lasso, s = c(0,0.0001,0.001,0.01,0.10,0.5,1.0,10))
coefs
#Binary Option
# normalize the coefficients. Before sweeping.
nonzero = which(abs(coefs)>0) # why is this 0.8?
results = unique(groups[nonzero])
results
causal_regions_1
causal_regions_2
### Generates the ROC function with the lasso procedure.
# Need to hack the rate_values so that it can take in the group lasso coefs.
generate_ROC_baseline = function(nsim = 20, num_shape_scaffold = 100, num_landmarks = 1000, causal_region_size = 40, noise_region_size = 40,
subdivision = 4, num_causal_region = 2, num_shared_region = 3){
print("generating data")
causal_regions_1 = sample(1:num_shape_scaffold,num_causal_region)
causal_regions_2 = sample((1:num_shape_scaffold)[-causal_regions_1],num_causal_region)
shared_regions = sample((1:num_shape_scaffold)[-c(causal_regions_1,causal_regions_2)],num_shared_region)
shape_data = generate_landmark_data_sphere_simulation(nsim = nsim, subdivision = subdivision,
causal_region_size = causal_region_size, noise_region_size = noise_region_size,
num_shape_scaffold = num_shape_scaffold, num_landmarks = num_landmarks,
causal_regions_1 = causal_regions_1, causal_regions_2 = causal_regions_2,
shared_regions = shared_regions)
data = shape_data[[1]]
class1_positive_landmarks = shape_data[[2]]
class2_positive_landmarks = shape_data[[3]]
print("Getting Lasso Coefficients")
groups = rep(1:(dim(data[,-1])[2]/3), each = 3)
#lasso = cv.glmnet(x = data[,-1], y = data[,1], alpha = 1.0,  family = "binomial") # how do these work
lasso <- cv.gglasso(x = data[,-1], y = data[,1], group = groups, loss = "logit",
intercept = TRUE, loss = "logit", nlambda = 500, pred.loss = "loss",nfolds = 10)
coefs = coef(lasso, s = 'lambda.min') # it might have  to do with  this choice of lasso coefficient.
### Need to organize the data to get the proper landmark chosen.
#Compute ROC using training data
roc_curve = compute_roc_curve_landmark(lasso_coefs = coefs,
causal_points1 = class1_positive_landmarks,
causal_points2 = class2_positive_landmarks)
roc_curve = cbind(roc_curve,(1:dim(roc_curve)[1]))
return(roc_curve)
}
#### Can compare these ROC curves directly to the sinatra simulation ...
causal_regions = 1
shared_regions = 2
generate_ROC_baseline(num_shape_scaffold = 50,
num_landmarks = 500,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
### Generates the ROC function with the lasso procedure.
# Need to hack the rate_values so that it can take in the group lasso coefs.
generate_ROC_baseline = function(nsim = 20, num_shape_scaffold = 100, num_landmarks = 1000, causal_region_size = 40, noise_region_size = 40,
subdivision = 4, num_causal_region = 2, num_shared_region = 3){
print("generating data")
causal_regions_1 = sample(1:num_shape_scaffold,num_causal_region)
causal_regions_2 = sample((1:num_shape_scaffold)[-causal_regions_1],num_causal_region)
shared_regions = sample((1:num_shape_scaffold)[-c(causal_regions_1,causal_regions_2)],num_shared_region)
shape_data = generate_landmark_data_sphere_simulation(nsim = nsim, subdivision = subdivision,
causal_region_size = causal_region_size, noise_region_size = noise_region_size,
num_shape_scaffold = num_shape_scaffold, num_landmarks = num_landmarks,
causal_regions_1 = causal_regions_1, causal_regions_2 = causal_regions_2,
shared_regions = shared_regions)
data = shape_data[[1]]
class1_positive_landmarks = shape_data[[2]]
class2_positive_landmarks = shape_data[[3]]
print("Getting Lasso Coefficients")
groups = rep(1:(dim(data[,-1])[2]/3), each = 3)
#lasso = cv.glmnet(x = data[,-1], y = data[,1], alpha = 1.0,  family = "binomial") # how do these work
lasso <- cv.gglasso(x = data[,-1], y = data[,1], group = groups, loss = "logit",
intercept = TRUE, nlambda = 500, pred.loss = "loss",nfolds = 10)
coefs = coef(lasso, s = 'lambda.min') # it might have  to do with  this choice of lasso coefficient.
### Need to organize the data to get the proper landmark chosen.
#Compute ROC using training data
roc_curve = compute_roc_curve_landmark(lasso_coefs = coefs,
causal_points1 = class1_positive_landmarks,
causal_points2 = class2_positive_landmarks)
roc_curve = cbind(roc_curve,(1:dim(roc_curve)[1]))
return(roc_curve)
}
#### Can compare these ROC curves directly to the sinatra simulation ...
causal_regions = 1
shared_regions = 2
generate_ROC_baseline(num_shape_scaffold = 50,
num_landmarks = 500,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
data <- data.frame(averaged_roc_curve)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_5causal_10shared_500landmarks_sphere_simulated_roc.pdf')
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_1causal_2shared_500landmarks_sphere_simulated_roc.pdf')
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_5causal10shared_500landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_1causal2shared_500landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
causal_regions = 3
shared_regions = 6
averaged_roc_curve <- generate_averaged_ROC_baseline(runs = 10,
num_shape_scaffold = 100,
num_landmarks = 500,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
data <- data.frame(averaged_roc_curve)
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_1causal2shared_500landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
causal_regions = 1
shared_regions = 2
averaged_roc_curve <- generate_averaged_ROC_baseline(runs = 10,
num_shape_scaffold = 100,
num_landmarks = 500,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
data <- data.frame(averaged_roc_curve)
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_1causal2shared_500landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
causal_regions = 3
shared_regions = 6
averaged_roc_curve <- generate_averaged_ROC_baseline(runs = 10,
num_shape_scaffold = 100,
num_landmarks = 500,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
data <- data.frame(averaged_roc_curve)
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_3causal6shared_500landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_3causal_6shared_500landmarks_sphere_simulated_roc.pdf')
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_3causal6shared_500landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
# vary the number of cusps...
# how do you make the TPR / FPR fair?
causal_regions = 5
shared_regions = 10
averaged_roc_curve <- generate_averaged_ROC_baseline(runs = 10,
num_shape_scaffold = 100,
num_landmarks = 500,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
data <- data.frame(averaged_roc_curve)
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_5causa10shared_500landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_5causal_10shared_500landmarks_sphere_simulated_roc.pdf')
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_5causa10shared_500landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
# vary the number of cusps...
# how do you make the TPR / FPR fair?
causal_regions = 1
shared_regions = 2
averaged_roc_curve <- generate_averaged_ROC_baseline(runs = 10,
num_shape_scaffold = 100,
num_landmarks = 2000,
num_causal_region = causal_regions,
num_shared_region = shared_regions)
data <- data.frame(averaged_roc_curve)
ROC_curve_plt <- ggplot(data <- data, aes(x = X1, y = X2)) +
geom_line(stat = "identity") +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)",
title = sprintf("Landmark Representation ROC curve, %s Causal, %s Shared", causal_regions, shared_regions )) +
geom_abline(intercept = 0, slope = 1) +
coord_equal(ratio=1) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(ROC_curve_plt)
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_5causal_10shared_2000landmarks_sphere_simulated_roc.pdf')
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_5causal_10shared_2000landmarks_sphere_simulated_roc.pdf')
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_1causal_2shared_2000landmarks_sphere_simulated_roc.pdf')
write.csv(total_roc,
file = '~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_1causal_2shared_2000landmarks_sphere_simulated_roc.csv',
row.names = FALSE)
ggsave('~/projects/Research/SINATRA/Results/LandmarkSimulations/group_lasso_1causal_2shared_2000landmarks_sphere_simulated_roc.pdf')
#Parameters for the Analysis
num_landmarks <- 1500
### Helper functions
get_euclidean_fps_landmarks = function(mesh, num_landmarks){
### Gets landmarks using farthest point sampling
landmarks = rdist::farthest_point_sampling(t(mesh$vb)[,1:3], metric = 'euclidean', num_landmarks)
landmarks
}
original_tooth_path = "/Users/timothysudijono/Dropbox/Data + experiments/Data/all_files_realignedv3/Aligned_Shapes/clean_V13_sas.off"
mesh = Rvcg::vcgImport(original_tooth_path)
landmark_indices = get_euclidean_fps_landmarks(mesh, num_landmarks)
base_dir = "~/Dropbox/CaricaturedTeeth/new_aligned_shapesv4/"
data_dirs = list.dirs(base_dir,recursive = FALSE)
roc_curves <- list()
for (i in 1:20) {
#for (i in 1:5) {
#i=6 example of NAs - need to debug this.
cat("on directory", i)
dir = data_dirs[i]
old_data_dir = paste(dir,'/mesh/gp1',sep='')
new_data_dir = paste(dir,'/mesh/gp2',sep='')
old_data_files = list.files(old_data_dir, full.names = TRUE)
new_data_files = list.files(new_data_dir, full.names = TRUE)
class_1_probs = read.csv(paste(dir,'/gp1_spt.csv',sep=''), header = FALSE) # lets us get the teue vertices, > 0.25 = gamma
class_2_probs = read.csv(paste(dir,'/gp2_spt.csv',sep=''), header = FALSE)
# varying the number of directions, but want to do something totally different
#total_dirs = c(1)
landmark_pset = list(base_shape_dir = "~/Dropbox/Data + experiments/Data/all_files_realignedv3/Aligned_Shapes/clean_V13_sas.off",
num_landmarks = num_landmarks)
data_summary = real_data_summary(shape_transformation = 'landmark', dir1=new_data_dir,dir2 = old_data_dir,
base_shape_dir = landmark_pset[[1]], num_landmarks = landmark_pset[[2]],
mode = "elastic_net", alpha = 0.25)
### These aren't necessarily rate_values they're just importance values -- we can replace  them with the lasso coefficients? How do these even serve as importance values?
### Seems like just a jeuristic
roc_curve = compute_roc_curve_teeth(data_dir1 = old_data_dir, data_dir2 = new_data_dir,
gamma = 0.25,class_1_probs = class_1_probs,class_2_probs = class_2_probs,
rate_values = data_summary$Rate2,
directions_per_cone = NULL, curve_length = NULL, directions = NULL,
mode = "landmark", base_shape_dir = landmark_pset[[1]])
#print(roc_curve)
roc_frame = data.frame(roc_curve)
roc_curves[[i]] = roc_frame
### visualize / debug
# which(abs(data_summary$inference_result)[,2] > 0)
#
# base_shape = Rvcg::vcgImport(landmark_pset[[1]])
# landmark_indices = get_euclidean_fps_landmarks(base_shape, landmark_pset[[2]])
#
# gamma = 0.25
# class1 = intersect(which(class_1_probs > gamma), landmark_indices)
# class2 = intersect(which(class_2_probs > gamma), landmark_indices)
# true_vertices = union(class1, class2)
#
# chosen_vertices = which(data_summary$Rate2 > 0)
#
# mesh = vcgImport(new_data_files[2])
# rgl::plot3d(mesh,color= 'white')
# rgl::points3d(t(mesh$vb)[true_vertices,1:3], color = "#2a6bbe", size = 5)
# rgl::points3d(t(mesh$vb)[chosen_vertices,1:3], color = '#ff4d4d', size = 10)
#
# rgl::plot3d(mesh,color= 'white')
# for(k in 5:6){
#   rgl::points3d(t(vcgImport(new_data_files[k])$vb)[1:5,1:3], color = '#ff4d4d', size = 10)
# }
}
total_roc = matrix(0, nrow = num_landmarks, ncol = 2)
not_null = 0
for (j in 1:length(roc_curves)){
if (!is.nan(roc_curves[[j]][1,2])){
total_roc = total_roc + roc_curves[[j]][,1:2]
not_null  = not_null+1
}
}
total_roc = total_roc/not_null
library(ggplot2)
ggplot() +
geom_line(data = total_roc, aes(x = X1,y = X2),alpha = 0.75,  size = 1.5, color = 'red') +
labs(x = "FPR (False Positive Rate)", y = "TPR (True Positive Rate)") +
ggtitle(sprintf("3 Caricatured Peaks: Group Lasso + Landmark")) +
coord_cartesian(xlim= c(0,1.0))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = 'bold'),
panel.background = element_blank(), axis.line = element_line(colour = "black"),axis.text=element_text(size=12),
axis.title=element_text(size=16,face="bold")) +
scale_colour_hue(l=40)
total_roc
load("~/Simulations/Restuls/df_ROC_causal5_shared10_5.RData")
load("~/projects/Research/SINATRA/Simulations/Results/df_ROC_causal5_shared10_5.RData")
rdfmeans$Num_Directions <- as.factor(rdfmeans$Num_Directions)
load("~/projects/Research/SINATRA/Simulations/Results/df_ROC_causal5_shared10_5.RData")
### Plot results ###
# plot the first class for simplicity
class_one_ROC <- rdfmeans[rdfmeans$Class == 1,]
ROC_curve_plt <- ggplot(data <- class_one_ROC,aes(x = FPR, y = TPR, color = Num_Directions)) +
geom_line(stat = "identity") +
labs(x = "FPR", y = "TPR") +
ggtitle(sprintf("causal:%d,shared:%d,type:%s",causal_points,shared_points,reconstruction_type)) +
geom_abline(intercept = 0, slope = 1)
causal_points = 5
shared_regions = 10
load("~/projects/Research/SINATRA/Simulations/Results/df_ROC_causal5_shared10_5.RData")
### Plot results ###
# plot the first class for simplicity
class_one_ROC <- rdfmeans[rdfmeans$Class == 1,]
ROC_curve_plt <- ggplot(data <- class_one_ROC,aes(x = FPR, y = TPR, color = Num_Directions)) +
geom_line(stat = "identity") +
labs(x = "FPR", y = "TPR") +
ggtitle(sprintf("causal:%d,shared:%d,type:%s",causal_points,shared_points,reconstruction_type)) +
geom_abline(intercept = 0, slope = 1)
shared_points = 10
ROC_curve_plt <- ggplot(data <- class_one_ROC,aes(x = FPR, y = TPR, color = Num_Directions)) +
geom_line(stat = "identity") +
labs(x = "FPR", y = "TPR") +
ggtitle(sprintf("causal:%d,shared:%d,type:%s",causal_points,shared_points,reconstruction_type)) +
geom_abline(intercept = 0, slope = 1)
reconstruction_type = 'EC'
ROC_curve_plt <- ggplot(data <- class_one_ROC,aes(x = FPR, y = TPR, color = Num_Directions)) +
geom_line(stat = "identity") +
labs(x = "FPR", y = "TPR") +
ggtitle(sprintf("causal:%d,shared:%d,type:%s",causal_points,shared_points,reconstruction_type)) +
geom_abline(intercept = 0, slope = 1)
class_one_ROC
ROC_curve_plt <- ggplot(data <- class_one_ROC,aes(x = FPR, y = TPR, color = Num_Cones)) +
geom_line(stat = "identity") +
labs(x = "FPR", y = "TPR") +
ggtitle(sprintf("causal:%d,shared:%d,type:%s",causal_points,shared_points,reconstruction_type)) +
geom_abline(intercept = 0, slope = 1)
class_one_ROC <- rdfmeans[rdfmeans$Class == 1,]
class_one_ROC
ROC_curve_plt <- ggplot(data <- class_one_ROC,aes(x = FPR, y = TPR, color = Num_Cones)) +
geom_line(stat = "identity") +
labs(x = "FPR", y = "TPR") +
ggtitle(sprintf("causal:%d,shared:%d,type:%s",causal_points,shared_points,reconstruction_type)) +
geom_abline(intercept = 0, slope = 1)
library(ggplot)
library(ggplot2)
ROC_curve_plt <- ggplot(data <- class_one_ROC, aes(x = FPR, y = TPR, color = Num_Cones)) +
geom_line(stat = "identity") +
labs(x = "FPR", y = "TPR") +
ggtitle(sprintf("causal:%d,shared:%d,type:%s",causal_points,shared_points,reconstruction_type)) +
geom_abline(intercept = 0, slope = 1)
print(ROC_curve_plt)
