new_names = names(to_filter)
new_names = c(new_names, "Label")
data = data[new_names]
k2 = rowSums(data[,-which(names(data) %in% c('Label','rRNA'))])
to_filter = which(k2 >= 15)
data = data[to_filter,]
#### Get Exponential + Stationary Genes
new_data = data[as.vector(data$Label == 'Exponential'),][-which(names(data) %in% c('Label','rRNA'))]
umi_counts_exponential = rowSums(new_data)
k = colSums(new_data!=0)
quantiles = quantile(k)
to_filter = which(k > 4)
to_filter_extreme = which(k > 14)
exp_operon_top_quartile = names(which(k > quantiles[4]))
exponential_operons = names(to_filter)
exponential_operons_extreme = names(to_filter_extreme)
new_data = data[as.vector(data$Label == 'Stationary'),][-which(names(data) %in% c('Label','rRNA'))]
umi_counts_stationary = rowSums(new_data)
k = colSums(new_data!=0)
to_filter = which(k > 4)
to_filter_extreme = which(k > 14)
quantiles = quantile(k)
stationary_operon_top_quartile = names(which(k > quantiles[4]))
stationary_operons = names(to_filter)
stationary_operons_extreme = names(to_filter_extreme)
data2 = data[,-which(names(data) %in% c('Label','rRNA'))]
data2 = data2 + rnorm(dim(data2)[1] * dim(data2)[2],0,0.05)
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
labs(x = "purEK Count", y = "Regulon member Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
geom_count(aes(y = `purL`, color = 'purL', alpha = 0.05))+
labs(x = "purEK Count", y = "Regulon member Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
labs(x = "purEK Count", y = "Regulon member Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
install.packages("cowplot")
install.packages("cowplot")
data2 = data[,-which(names(data) %in% c('Label','rRNA'))]
operons = c('purHD','cvpA-purF-ubiX','purA','purL')
plots = list()
for (i in length(operons)){
plots[[i]] = ggplot(data = data2, aes(x = `purEK`,  y = data2[operons[i]],group = 'Label')) +
geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
labs(x = "purEK Count", y = "Regulon member Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
}
plots[[1]]
plots
plots = list()
operons = c('purHD','cvpA-purF-ubiX','purA','purL')
plots = list()
for (i in length(operons)){
print(operons[i])
plots[[i]] = ggplot(data = data2, aes(x = `purEK`,  y = data2[operons[i]],group = 'Label')) +
geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
labs(x = "purEK Count", y = "Regulon member Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
}
operons = c('purHD','cvpA-purF-ubiX','purA','purL')
plots = list()
for (i in length(operons)){
print(operons[i])
plots[[i]] = ggplot(data = data2, aes(x = `purEK`,  y = data2[operons[i]],group = 'Label')) +
geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
labs(x = "purEK Count", y = "Regulon member Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
}
plots = list()
for (i in 1:length(operons)){
print(operons[i])
plots[[i]] = ggplot(data = data2, aes(x = `purEK`,  y = data2[operons[i]],group = 'Label')) +
geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
labs(x = "purEK Count", y = "Regulon member Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
}
plots
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
labs(x = "purEK Count", y = "Regulon member Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
labs(x = "purEK Count", y = "PurL Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
#  geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
#  geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
labs(x = "purEK Count", y = "PurL Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
#  geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
#  geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
geom_count(aes(y = `purL`, color = 'purL', alpha = 1.5))+
labs(x = "purEK Count", y = "PurL Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
#  geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
#  geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
geom_count(aes(y = `purL`, color = 'red', alpha = 1.5))+
labs(x = "purEK Count", y = "PurL Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
#  geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
#  geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
geom_count(aes(y = `purL`, alpha = 1.5))+
labs(x = "purEK Count", y = "PurL Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('~/Dropbox (Princeton)/Notes/research/gitai_wingreen/scBactoSeq/Figures/2020-05-12/pur_regulon_purL.png')
sum(data$purL)
g = colSums(data2)
g
g$purLL
g['purL']
which(g == 1462)
which(g == 1463)
which(g < 1500 && g > 1400)
intersect(g < 1500, g > 1400)
order(g)
sort(g)
sort(g,FALSE)
sort(g,TRUE)
sort(g,TRUE)[1:100]
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
#  geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
#  geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
geom_count(aes(y = `glsA-ybaT`, alpha = 1.5))+
labs(x = "purEK Count", y = "glsA-ybaT Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression - Random Operon")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('~/Dropbox (Princeton)/Notes/research/gitai_wingreen/scBactoSeq/Figures/2020-05-12/pur_regulon_random.png')
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
geom_count(aes(y = `purHD`, color = 'purHD', alpha = 0.5))+
#  geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
#  geom_count(aes(y = `purL`, alpha = 1.5))+
labs(x = "purEK Count", y = "PurHD Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression - purHD")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data = data2, aes(x = `purEK`,  group = 'Label')) +
geom_count(aes(y = `purHD`, alpha = 0.5))+
#  geom_count(aes(y = `cvpA-purF-ubiX`, color = 'cvpA-purF-ubiX', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
#  geom_count(aes(y = `purL`, alpha = 1.5))+
labs(x = "purEK Count", y = "PurHD Count", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression - purHD")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('~/Dropbox (Princeton)/Notes/research/gitai_wingreen/scBactoSeq/Figures/2020-05-12/pur_regulon_purhd.png')
ggplot(data = new_df, aes(x = `fliAZ-tcyJ`,  group = 'Label')) +
geom_count(aes(y = `fliFGHIJK`, color = 'fliFGHIJK', alpha = 0.5))+
geom_count(aes(y = `fliLMNOPQR`, color = 'fliLMNOPQR', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
#  geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
#  labs(x = "purEK Relative Abundance", y = "Regulon member abundance", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data = data2, aes(x = `fliAZ-tcyJ`,  group = 'Label')) +
geom_count(aes(y = `fliFGHIJK`, color = 'fliFGHIJK', alpha = 0.5))+
geom_count(aes(y = `fliLMNOPQR`, color = 'fliLMNOPQR', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
#  geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
#  labs(x = "purEK Relative Abundance", y = "Regulon member abundance", color = "Label") +
ggtitle(sprintf("purEK Regulon Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data = data2, aes(x = `fliAZ-tcyJ`,  group = 'Label')) +
geom_count(aes(y = `fliFGHIJK`, color = 'fliFGHIJK', alpha = 0.5))+
#  geom_count(aes(y = `fliLMNOPQR`, color = 'fliLMNOPQR', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
#  geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
#  labs(x = "purEK Relative Abundance", y = "Regulon member abundance", color = "Label") +
ggtitle(sprintf("fliA Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('~/Dropbox (Princeton)/Notes/research/gitai_wingreen/scBactoSeq/Figures/2020-05-12/fli_regulon_fliF.png')
g['fliFGHIJK']
ggplot(data = data2, aes(x = `fliAZ-tcyJ`,  group = 'Label')) +
geom_count(aes(y = `fliFGHIJK` ))+
#  geom_count(aes(y = `fliLMNOPQR`, color = 'fliLMNOPQR', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
#  geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
#  labs(x = "purEK Relative Abundance", y = "Regulon member abundance", color = "Label") +
ggtitle(sprintf("fliA Coexpression")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('~/Dropbox (Princeton)/Notes/research/gitai_wingreen/scBactoSeq/Figures/2020-05-12/fli_regulon_fliF.png')
ggplot(data = data2, aes(x = `fliAZ-tcyJ`,  group = 'Label')) +
geom_count(aes(y = `fliFGHIJK` ))+
#  geom_count(aes(y = `fliLMNOPQR`, color = 'fliLMNOPQR', alpha = 0.5))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
#  geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
#  labs(x = "purEK Relative Abundance", y = "Regulon member abundance", color = "Label") +
ggtitle(sprintf("fliA Coexpression - fliF")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('~/Dropbox (Princeton)/Notes/research/gitai_wingreen/scBactoSeq/Figures/2020-05-12/fli_regulon_fliF.png')
ggplot(data = data2, aes(x = `fliAZ-tcyJ`,  group = 'Label')) +
#  geom_count(aes(y = `fliFGHIJK` ))+
geom_count(aes(y = `fliLMNOPQR`))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
#  geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
#  labs(x = "purEK Relative Abundance", y = "Regulon member abundance", color = "Label") +
ggtitle(sprintf("fliA Coexpression - fliLMNOPQR")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('~/Dropbox (Princeton)/Notes/research/gitai_wingreen/scBactoSeq/Figures/2020-05-12/fli_regulon_flimno.png')
g['fliLMNOPQR']
sort(g)
sort(g, FALSE)
sort(g, TRUE)
ggplot(data = data2, aes(x = `fliAZ-tcyJ`,  group = 'Label')) +
#  geom_count(aes(y = `fliFGHIJK` ))+
geom_count(aes(y = `barA`))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
#  geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
#  labs(x = "purEK Relative Abundance", y = "Regulon member abundance", color = "Label") +
ggtitle(sprintf("fliA Coexpression - barA (random)")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('~/Dropbox (Princeton)/Notes/research/gitai_wingreen/scBactoSeq/Figures/2020-05-12/fli_regulon_random.png')
ggplot(data = data2, aes(x = `fliAZ-tcyJ`,  group = 'Label')) +
#  geom_count(aes(y = `fliFGHIJK` ))+
geom_count(aes(y = `kdgR`))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
#  geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
#  labs(x = "purEK Relative Abundance", y = "Regulon member abundance", color = "Label") +
ggtitle(sprintf("fliA Coexpression - barA (random)")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data = data2, aes(x = `fliAZ-tcyJ`,  group = 'Label')) +
#  geom_count(aes(y = `fliFGHIJK` ))+
geom_count(aes(y = `kdgR`))+
#  geom_count(aes(y = `purA`, color = 'purA', alpha = 0.5))+
#  geom_count(aes(y = `purL`, color = 'purL', alpha = 0.5))+
#  labs(x = "purEK Relative Abundance", y = "Regulon member abundance", color = "Label") +
ggtitle(sprintf("fliA Coexpression - kdgR (random)")) +
#  geom_vline(xintercept = 10) +
#  geom_text(aes(x=30, label="X = 10", y=30), colour="Black", angle=0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.3),text = element_text(size=18),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave('~/Dropbox (Princeton)/Notes/research/gitai_wingreen/scBactoSeq/Figures/2020-05-12/fli_regulon_random.png')
new_df$flhBAE
hist(log(new_df$flhBAE))
View(causal_points1_vec)
set.seed(4913, kind = "L'Ecuyer-CMRG")
library(sinatra)
library(FNN)
library(rgl)
library(Rvcg)
library(plyr)
library(pdist)
library(gglasso)
library(numbers)
library(data.table)
library(stringr)
cap_radius = 0.15
num_cones = 5
directions_per_cone = 5
len = 75
#### Function ####
roc_curve_teeth_baseline = function(data_dir,var_selection='elastic_net',ec_type = 'baseline',reduce = max,alpha = 0.5){
roc_curves1 = list()
roc_curves2 = list()
data_dirs = list.dirs(base_dir,recursive = FALSE)
for (k in 1:length(data_dir)){
dir = data_dirs[k]
dir1 = paste(dir,'/mesh/gp1',sep='')
dir2 = paste(dir,'/mesh/gp2',sep='')
data_files1 = list.files(dir1, full.names = TRUE)
data_files1 = data_files1[str_detect(data_files1,'off')]
data_files2 = list.files(dir2, full.names = TRUE)
data_files2 = data_files1[str_detect(data_files2,'off')]
class_1_probs = read.csv(paste(dir,'/gp1_spt.csv',sep=''), header = FALSE)
class_2_probs = read.csv(paste(dir,'/gp2_spt.csv',sep=''), header = FALSE)
roc_curves = list()
dirs = 0
pset = list(num_cones = 0, cap_radius = 0.15, len = 100, directions_per_cone = 5,
dirs = 0)
data_summary=real_data_summary(dir1=dir1,dir2 = dir2,direction=pset$dirs,
len = pset$len, ball = ball, ball_radius = ball_radius, ec_type = ec_type, reduce = reduce, alpha = alpha)
roc_curve = compute_roc_curve_teeth(data_dir1 = dir1, data_dir2 = dir2, gamma = 0.25,class_1_probs = class_1_probs,class_2_probs = class_2_probs,
rate_values = data_summary$Rate2[,2],directions_per_cone = pset$directions_per_cone,curve_length = pset$len,
directions = pset$dirs,truncated = 500,ball_radius = ball_radius, ball = ball, radius = 1, two_curves = TRUE,mode = 'baseline')
#print(roc_curve)
roc_curve[,3] = dirs
roc_frame = data.frame(roc_curve)
roc_curves1[[k]] = roc_frame[1:500,]
roc_curves2[[k]] = roc_frame[500:1000,]
}
return(list(roc_curves1,roc_curves2))
}
base_dir = '~/Documents/new_aligned_shapesv3/'
g1 = roc_curve_teeth_baseline(data_dir = base_dir)
#### Function ####
roc_curve_teeth_baseline = function(data_dir,var_selection='elastic_net',ec_type = 'baseline',reduce = max,alpha = 0.5){
roc_curves1 = list()
roc_curves2 = list()
data_dirs = list.dirs(base_dir,recursive = FALSE)
for (k in 1:length(data_dir)){
dir = data_dirs[k]
dir1 = paste(dir,'/mesh/gp1',sep='')
dir2 = paste(dir,'/mesh/gp2',sep='')
data_files1 = list.files(dir1, full.names = TRUE)
data_files1 = data_files1[str_detect(data_files1,'off')]
data_files2 = list.files(dir2, full.names = TRUE)
data_files2 = data_files1[str_detect(data_files2,'off')]
class_1_probs = read.csv(paste(dir,'/gp1_spt.csv',sep=''), header = FALSE)
class_2_probs = read.csv(paste(dir,'/gp2_spt.csv',sep=''), header = FALSE)
roc_curves = list()
dirs = 0
pset = list(num_cones = 0, cap_radius = 0.15, len = 100, directions_per_cone = 5,
dirs = 0)
data_summary=real_data_summary(dir1=dir1,dir2 = dir2,direction=pset$dirs,
len = pset$len, ball = ball, ball_radius = ball_radius, ec_type = ec_type, reduce = reduce, alpha = alpha, mode = var_selection)
roc_curve = compute_roc_curve_teeth(data_dir1 = dir1, data_dir2 = dir2, gamma = 0.25,class_1_probs = class_1_probs,class_2_probs = class_2_probs,
rate_values = data_summary$Rate2[,2],directions_per_cone = pset$directions_per_cone,curve_length = pset$len,
directions = pset$dirs,truncated = 500,ball_radius = ball_radius, ball = ball, radius = 1, two_curves = TRUE,mode = 'baseline')
#print(roc_curve)
roc_curve[,3] = dirs
roc_frame = data.frame(roc_curve)
roc_curves1[[k]] = roc_frame[1:500,]
roc_curves2[[k]] = roc_frame[500:1000,]
}
return(list(roc_curves1,roc_curves2))
}
base_dir = '~/Documents/new_aligned_shapesv3/'
g1 = roc_curve_teeth_baseline(data_dir = base_dir)
#write.csv(g1,'~/Documents/SINATRA/Scripts/Data/baseline_2causal_1_shared_elastic_net_max.csv')
g1 = read.csv('~/Documents/SINATRA/Scripts/Data/baseline_2causal_1_shared_elastic_net_max.csv')[,-1][,-4]
k = 3
data_dirs = list.dirs(base_dir,recursive = FALSE)
dir1 = paste(dir,'/mesh/gp1',sep='')
dir = data_dirs[k]
dir1 = paste(dir,'/mesh/gp1',sep='')
dir2 = paste(dir,'/mesh/gp2',sep='')
data_files1 = list.files(dir1, full.names = TRUE)
data_files1 = data_files1[str_detect(data_files1,'off')]
data_files2 = list.files(dir2, full.names = TRUE)
data_files2 = data_files1[str_detect(data_files2,'off')]
class_1_probs = read.csv(paste(dir,'/gp1_spt.csv',sep=''), header = FALSE)
class_2_probs = read.csv(paste(dir,'/gp2_spt.csv',sep=''), header = FALSE)
roc_curves = list()
dirs = 0
pset = list(num_cones = 0, cap_radius = 0.15, len = 100, directions_per_cone = 5,
dirs = 0)
data_summary=real_data_summary(dir1=dir1,dir2 = dir2,direction=pset$dirs,
len = pset$len, ball = ball, ball_radius = ball_radius, ec_type = ec_type, reduce = reduce, alpha = alpha, mode = var_selection)
ec_type = 'baseline'
var_selection='elastic_net'
reduce = max
alpha = 0.5
data_summary=real_data_summary(dir1=dir1,dir2 = dir2,direction=pset$dirs,
len = pset$len, ball = ball, ball_radius = ball_radius, ec_type = ec_type, reduce = reduce, alpha = alpha, mode = var_selection)
mesh = vcgImport('~/Documents/new_aligned_shapesv3/V13_3peak_2gp_v1_bw/mesh/gp1/V13_7.off')
g = mesh_to_matrix(mesh)
g
directory = dir1
diir1
dir1
file_names=list.files(path=directory,full.names = TRUE)
file_names = file_names[str_detect(file_names,'off')]
file_names
number_files=length(file_names)
nvertices =  mesh_to_matrix(vcgImport(file_names[1]))
data <- matrix(NA,nrow=number_files,ncol = nvertices)
print(paste('On File', i))
off=process_off_file_v3(file_names[i])
data <- matrix(NA,nrow=number_files,ncol = nvertices)
nvertices =  mesh_to_matrix(vcgImport(file_names[1]))
data <- matrix(NA,nrow=number_files,ncol = nvertices)
print(paste('On File', i))
off=process_off_file_v3(file_names[i])
data <- matrix(NA,nrow=number_files,ncol = nvertices)
i = 3
mesh = vcgImport(file_names[i])
curve = mesh_to_matrix(mesh)
data[i,] <- curve
data[3,]
data <- matrix(NA,nrow=number_files,ncol = nvertices)
nvertices
library(devtools)
setwd('~/Documents/SINATRA/sinatra')
build('')
build('.')
install('.')
